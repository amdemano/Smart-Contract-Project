// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RideHailingSystem {
    address public admin;

    enum RideStatus { Requested, Accepted, Completed }

    struct Ride {
        address passenger;
        address driver;
        uint256 fare;
        RideStatus status;
    }

    mapping(address => bool) private registeredDrivers;
    mapping(uint256 => Ride) private rides;
    uint256 private rideCounter;

    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Not the admin");
        _;
    }

    modifier onlyDriver() {
        require(registeredDrivers[msg.sender], "Not a registered driver");
        _;
    }

    modifier validRide(uint256 _rideId) {
        require(_rideId < rideCounter, "Invalid ride ID");
        _;
    }

    function registerDriver(address _driver) public onlyAdmin {
        require(_driver != address(0), "Invalid address");
        registeredDrivers[_driver] = true;
    }

    function requestRide(uint256 _fare) public returns (uint256) {
        require(_fare > 0, "Fare must be greater than zero");

        rides[rideCounter] = Ride({
            passenger: msg.sender,
            driver: address(0),
            fare: _fare,
            status: RideStatus.Requested
        });

        rideCounter++;
        return rideCounter - 1;
    }

    function acceptRide(uint256 _rideId) public onlyDriver validRide(_rideId) {
        Ride storage ride = rides[_rideId];
        require(ride.status == RideStatus.Requested, "Ride is not available for acceptance");
        ride.driver = msg.sender;
        ride.status = RideStatus.Accepted;
    }

    function completeRide(uint256 _rideId) public onlyDriver validRide(_rideId) {
        Ride storage ride = rides[_rideId];
        require(ride.status == RideStatus.Accepted, "Ride is not in progress");
        require(ride.driver == msg.sender, "Only the assigned driver can complete the ride");

        ride.status = RideStatus.Completed;
    }

    function getRideDetails(uint256 _rideId) public view validRide(_rideId) returns (address, address, uint256, RideStatus) {
        Ride storage ride = rides[_rideId];
        return (ride.passenger, ride.driver, ride.fare, ride.status);
    }

    function triggerAssert(uint256 _rideId) public view validRide(_rideId) {
        // This assertion will fail if the ride has not been requested
        assert(rides[_rideId].status == RideStatus.Requested);
    }

    function triggerRevert() public pure {
        revert("This is a forced revert");
    }

    function close() public onlyAdmin {
        selfdestruct(payable(admin));
    }
}
